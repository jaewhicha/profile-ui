stages:
  - build
  - test
  - deploy

install:
  stage: build
  image: node:14
  script:
    - yarn install
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - node_modules/

build:
  image: google/cloud-sdk:alpine
  services:
    - docker:19.03-dind
  variables:
    DOCKER_IMAGE: $IMAGE_NAME-$CI_COMMIT_SHORT_SHA
  before_script:
    - base64 -d $GCP_SA_KEY > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
    - gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
    - gcloud config set project $GCP_PROJECT
    - gcloud auth configure-docker --quiet
  script:
    - echo "IMAGE_APP_TAG=$IMAGE_NAME" >> .env
    - docker-compose build
    - docker tag $IMAGE_NAME" $GCP_DOCKER_REGION/$GCP_PROJECT/$GCP_DOCKER_REPO/$DOCKER_IMAGE
    - docker push $GCP_DOCKER_REGION/$GCP_PROJECT/$GCP_DOCKER_REPO/$DOCKER_IMAGE
  stage: build

lint:
  stage: test
  image: node:15
  before_script:
    - yarn install
  needs: ["install"]
  cache:
    key:
      files:
        - yarn.lock
    policy: pull
    paths:
      - node_modules/
  script:
    - yarn eslint .

test:
  stage: test
  image: node:15
  before_script:
    - yarn install
  needs: ["install"]
  cache:
    key:
      files:
        - yarn.lock
    policy: pull
    paths:
      - node_modules/
  script:
    - yarn test

deploy:staging:
  image: google/cloud-sdk:alpine
  stage: deploy
  services:
    - docker:19.03-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS
    - gcloud config set project $GCP_PROJECT
    - gcloud auth configure-docker --quiet
  script:
    - docker image pull $DOCKER_IMAGE
    - export GCP_PROJECT_ID="$(gcloud config get-value project)"
    - export GCP_DOCKER_IMAGE="gcr.io/$GCP_PROJECT_ID/$CI_COMMIT_REF_SLUG"
    - docker image tag $DOCKER_IMAGE $GCP_DOCKER_IMAGE
    - docker image push $GCP_DOCKER_IMAGE
    - gcloud run deploy $GCP_SERVICE --image $GCP_DOCKER_IMAGE --platform managed --region $GCP_REGION
    - echo "ENVIRONMENT_URL=$(gcloud run services list --platform managed --region $GCP_REGION | grep $GCP_SERVICE | awk '{print $4}')" >> deploy.env
  environment:
    name: staging
    url: $ENVIRONMENT_URL
  artifacts:
    reports:
      dotenv: deploy.env
  dependencies:
    - build
  variables:
    GIT_STRATEGY: none
    DOCKER_IMAGE: $GCP_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
    DOCKER_HOST: tcp://docker:2375
    GCP_PROJECT: my-staging-project
    GCP_REGION: europe-west1
    GCP_SERVICE: api-server
  only:
    - master

deploy:production:
  extends: deploy:staging
  environment:
    name: production
  variables:
    GCP_PROJECT: my-production-project
  when: manual