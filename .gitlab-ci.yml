stages:
  - install
  - build
  - test
  - deploy

install:
  stage: install
  image: node:15
  script:
    - yarn install
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - node_modules/

lint:
  stage: test
  image: node:15
  before_script:
    - yarn install
  needs: ["install"]
  cache:
    key:
      files:
        - yarn.lock
    policy: pull
    paths:
      - node_modules/
  script:
    - yarn eslint .
  dependencies:
    - install

test:
  stage: test
  image: node:15
  before_script:
    - yarn install
  needs: ["install"]
  cache:
    key:
      files:
        - yarn.lock
    policy: pull
    paths:
      - node_modules/
  script:
    - yarn test
  dependencies:
    - install

build:
  image: google/cloud-sdk:alpine
  services:
    - docker:19.03-dind
  variables:
    DOCKER_IMAGE: $IMAGE_NAME-$CI_COMMIT_SHORT_SHA
  before_script:
    - base64 -d ~/gcloud/gitlab-key-base64 > ${HOME}/gcloud-service-key.json    
    - gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
    - gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
    - gcloud config set project $GCP_PROJECT
    - gcloud auth configure-docker --quiet
  script:
    - docker build --cache-from -t $DOCKER_IMAGE .
    - docker tag $DOCKER_IMAGE $GCP_DOCKER_REGION/$GCP_PROJECT/$GCP_DOCKER_REPO/$DOCKER_IMAGE
    - docker push $GCP_DOCKER_REGION/$GCP_PROJECT/$GCP_DOCKER_REPO/$DOCKER_IMAGE
  stage: build
  dependencies:
    - lint
    - test

deploy:staging:
  image: google/cloud-sdk:alpine
  stage: deploy
  services:
    - docker:19.03-dind
  before_script:
    - base64 -d ~/gcloud/gitlab-key-base64 > ${HOME}/gcloud-service-key.json    
    - gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
    - gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
    - gcloud config set project $GCP_PROJECT
    - gcloud auth configure-docker --quiet
  script:
    - gcloud run deploy $GCP_SERVICE --image $DOCKER_IMAGE --platform managed --region $GCP_REGION
    - echo "ENVIRONMENT_URL=$(gcloud run services list --platform managed --region $GCP_REGION | grep $GCP_SERVICE | awk '{print $4}')" >> deploy.env
  environment:
    name: staging
    url: $ENVIRONMENT_URL_STAGE
  artifacts:
    reports:
      dotenv: deploy.env
  dependencies:
    - build
  variables:
    DOCKER_IMAGE: $IMAGE_NAME-$CI_COMMIT_SHORT_SHA
    GCP_SERVICE_NAME: $GCP_SERVICE-stage
  only:
    - master

deploy:production:
  extends: deploy:staging
  environment:
    name: production
    url: $ENVIRONMENT_URL_PROD
  variables:
    GCP_SERVICE_NAME: $GCP_SERVICE-prod
  when: manual