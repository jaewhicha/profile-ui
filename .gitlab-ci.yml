# stages:
#   - build
#   - test
#   - deploy

# install:
#   stage: build
#   image: node:14.9-alpine3.12
#   script:
#     - npm install
#   cache:
#     key:
#       files:
#         - package-lock.json
#     paths:
#       - node_modules/

# build:
#   image:
#     name: gcr.io/kaniko-project/executor:debug
#     entrypoint: [""]
#   variables:
#     DOCKER_IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
#   script:
#     - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
#     - /kaniko/executor
#         --context $CI_PROJECT_DIR
#         --dockerfile $CI_PROJECT_DIR/Dockerfile
#         --cache=true
#         --cache-repo=$CI_REGISTRY_IMAGE/cache
#         --destination $DOCKER_IMAGE
#   stage: build

# lint:
#   stage: test
#   image: node:14.9-alpine3.12
#   before_script:
#     - npm install
#   needs: ["install"]
#   cache:
#     key:
#       files:
#         - package-lock.json
#     policy: pull
#     paths:
#       - node_modules/
#   script:
#     - npm run lint

# test:
#   stage: test
#   image: node:14.9-alpine3.12
#   before_script:
#     - npm install
#   needs: ["install"]
#   cache:
#     key:
#       files:
#         - package-lock.json
#     policy: pull
#     paths:
#       - node_modules/
#   script:
#     - npm run test

# deploy:staging:
#   image: google/cloud-sdk:alpine
#   stage: deploy
#   services:
#     - docker:19.03-dind
#   before_script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS
#     - gcloud config set project $GCP_PROJECT
#     - gcloud auth configure-docker --quiet
#   script:
#     - docker image pull $DOCKER_IMAGE
#     - export GCP_PROJECT_ID="$(gcloud config get-value project)"
#     - export GCP_DOCKER_IMAGE="gcr.io/$GCP_PROJECT_ID/$CI_COMMIT_REF_SLUG"
#     - docker image tag $DOCKER_IMAGE $GCP_DOCKER_IMAGE
#     - docker image push $GCP_DOCKER_IMAGE
#     - gcloud run deploy $GCP_SERVICE --image $GCP_DOCKER_IMAGE --platform managed --region $GCP_REGION
#     - echo "ENVIRONMENT_URL=$(gcloud run services list --platform managed --region $GCP_REGION | grep $GCP_SERVICE | awk '{print $4}')" >> deploy.env
#   environment:
#     name: staging
#     url: $ENVIRONMENT_URL
#   artifacts:
#     reports:
#       dotenv: deploy.env
#   dependencies:
#     - build
#   variables:
#     GIT_STRATEGY: none
#     DOCKER_IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
#     DOCKER_HOST: tcp://docker:2375
#     GCP_PROJECT: my-staging-project
#     GCP_REGION: europe-west1
#     GCP_SERVICE: api-server
#   only:
#     - master

# deploy:production:
#   extends: deploy:staging
#   environment:
#     name: production
#   variables:
#     GCP_PROJECT: my-production-project
#   when: manual